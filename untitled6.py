# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aDB7cLYOlvZ6pcLMGwsKpjM_JLoNZpjZ
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

# Import necessary libraries
import pandas as pd
categories_df = pd.read_csv('/content/drive/MyDrive/amazon/amazon_categories.csv')
products_df = pd.read_csv('/content/drive/MyDrive/amazon/amazon_products.csv')

# Inspect the data
print(categories_df.head())
print(products_df.head())

# Import necessary libraries
import pandas as pd

# Load the datasets
categories_df = pd.read_csv('/content/drive/MyDrive/amazon/amazon_categories.csv')
products_df = pd.read_csv('/content/drive/MyDrive/amazon/amazon_products.csv')

# Inspect the first few rows of both datasets
print("Categories DataFrame:")
print(categories_df.head())
print("\nProducts DataFrame:")
print(products_df.head())

# Check for missing values in both datasets
print("Missing values in Categories DataFrame:")
print(categories_df.isnull().sum())
print("\nMissing values in Products DataFrame:")
print(products_df.isnull().sum())

# Check for duplicates in both datasets
print("Duplicate rows in Categories DataFrame:", categories_df.duplicated().sum())
print("Duplicate rows in Products DataFrame:", products_df.duplicated().sum())

# Merge the two DataFrames on 'category_id' and 'id'
merged_df = pd.merge(products_df, categories_df, left_on='category_id', right_on='id')

# Inspect the merged DataFrame
print("Merged DataFrame:")
print(merged_df.head())

# Top categories by the number of products
top_categories = merged_df['category_name'].value_counts().head(10)
print("Top Categories by Number of Products:")
print(top_categories)

# Average rating (stars) per category
avg_rating_per_category = merged_df.groupby('category_name')['stars'].mean().sort_values(ascending=False)
print("Average Rating per Category:")
print(avg_rating_per_category)

# Calculate total sales (price * boughtInLastMonth) per category
merged_df['total_sales'] = merged_df['price'] * merged_df['boughtInLastMonth']
total_sales_per_category = merged_df.groupby('category_name')['total_sales'].sum().sort_values(ascending=False)
print("Total Sales by Category:")
print(total_sales_per_category)

# Best-selling categories (where isBestSeller is True)
bestselling_categories = merged_df[merged_df['isBestSeller'] == True]['category_name'].value_counts().head(10)
print("Best-Selling Categories:")
print(bestselling_categories)

# Import libraries for visualization
import matplotlib.pyplot as plt
import seaborn as sns

# Set seaborn theme for better aesthetics
sns.set_theme(style="whitegrid")

# Plot top categories by number of products
plt.figure(figsize=(10, 6))
sns.barplot(x=top_categories.values, y=top_categories.index, palette="viridis")
plt.title("Top Categories by Number of Products", fontsize=16)
plt.xlabel("Number of Products", fontsize=12)
plt.ylabel("Category", fontsize=12)
plt.show()

# Select top 10 categories by average rating
top_10_avg_rating = avg_rating_per_category.head(10)

# Plot top 10 average ratings per category
plt.figure(figsize=(10, 6))
sns.barplot(x=top_10_avg_rating.values, y=top_10_avg_rating.index, palette="coolwarm")
plt.title("Top 10 Categories by Average Rating", fontsize=16)
plt.xlabel("Average Rating (Stars)", fontsize=12)
plt.ylabel("Category", fontsize=12)
plt.show()

# Scatter plot for price vs number of reviews
plt.figure(figsize=(10, 6))
sns.scatterplot(x='price', y='reviews', hue='isBestSeller', data=merged_df, palette="deep")
plt.title("Price vs. Number of Reviews", fontsize=16)
plt.xlabel("Price", fontsize=12)
plt.ylabel("Number of Reviews", fontsize=12)
plt.show()

# Pair plot to show relationships between numerical columns
plt.figure(figsize=(10, 6))
sns.pairplot(merged_df[['price', 'stars', 'reviews', 'boughtInLastMonth']], diag_kind='kde', plot_kws={'alpha':0.5})
plt.show()

# Correlation matrix
corr_matrix = merged_df[['price', 'stars', 'reviews', 'boughtInLastMonth', 'total_sales']].corr()

# Plot the heatmap for correlations
plt.figure(figsize=(10, 6))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", linewidths=.5)
plt.title("Correlation Heatmap", fontsize=16)
plt.show()

# Top 10 most expensive products
top_expensive_products = merged_df[['title', 'price']].sort_values(by='price', ascending=False).head(10)
print("Top 10 Most Expensive Products:")
print(top_expensive_products)

# Average number of reviews per category
avg_reviews_per_category = merged_df.groupby('category_name')['reviews'].mean().sort_values(ascending=False)
print("Average Number of Reviews per Category:")
print(avg_reviews_per_category)

# Calculate percentage of best sellers per category
best_sellers_percentage = merged_df.groupby('category_name')['isBestSeller'].mean() * 100
best_sellers_percentage = best_sellers_percentage.sort_values(ascending=False).head(10)
print("Top 10 Categories by Best Seller Percentage:")
print(best_sellers_percentage)

# Bar plot for top 10 most expensive products
plt.figure(figsize=(10, 6))
sns.barplot(x=top_expensive_products['price'], y=top_expensive_products['title'], palette="magma")
plt.title("Top 10 Most Expensive Products", fontsize=16)
plt.xlabel("Price", fontsize=12)
plt.ylabel("Product Title", fontsize=12)
plt.show()

# Pie chart for top 10 categories by best seller percentage
plt.figure(figsize=(8, 8))
plt.pie(best_sellers_percentage, labels=best_sellers_percentage.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette('coolwarm', 10))
plt.title("Top 10 Categories by Best Seller Percentage", fontsize=16)
plt.show()

# Count plot for number of products per category
plt.figure(figsize=(12, 8))
sns.countplot(y='category_name', data=merged_df, order=merged_df['category_name'].value_counts().index[:10], palette="Set2")
plt.title("Number of Products per Category (Top 10)", fontsize=16)
plt.xlabel("Count", fontsize=12)
plt.ylabel("Category", fontsize=12)
plt.show()